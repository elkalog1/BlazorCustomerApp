@using  BlazorApp2.Shared
@page  "/"
@inject HttpClient Http

<h1>Customer Data</h1>
<p>CRUD operation with Blazor using MongoDB</p>
<style>
    .modal-body1 {
        height: 500px;
        overflow: hidden;
    }

    modal-body1:hover {
        overflow-y: auto;
    }


    .modal-body2 {
        height: 100px;
        overflow: hidden;
    }
</style>
<br />
<div>
    <div style="float:left">
        <button class="btn btn-primary" @onclick="@Add">Add Customer</button>
    </div>
    <div style="float:right; width:40%;">
        <div class="col-sm-6" style="float:left">
            <input class="form-control" type="text" name="search" placeholder="Type for search..." @bind="@SearchString">
            </div>
            <button class="btn btn-primary" type="submit" @onclick="@(async()=> await SearchCustomer(@SearchString))">Search</button>
         </div>
        </div>
<br />

@if (custList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Company Name</th>
                <th>Contact Name</th>
                <th>Address</th>
                <th>City</th>
                <th>Region</th>
                <th>Postal Code</th>
                <th>Country</th>
                <th>Phone</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var customer in custList)
            {
                <tr>
                    <td>@customer.CompanyName</td>
                    <td>@customer.ContactName</td>
                    <td>@customer.Address</td>
                    <td>@customer.City</td>
                    <td>@customer.Region</td>
                    <td>@customer.PostalCode</td>
                    <td>@customer.Country</td>
                    <td>@customer.Phone</td>
                    <td>
                        <button class="btn btn-info" @onclick="@(async () => await Edit(@customer.Id))">Edit</button>
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteConfirm(customer.Id))">Delete</button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
    <br />
}


@if (addCustomer)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">

        <div class="modal-dialog ">

            <div class="modal-content">

                <div class="modal-header popupheader">
                    <h3 class="modal-title">@title</h3>
                    <button type="button" class="close" @onclick="@CloseModal">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>

                <div class="modal-body modal-body1 overflow-auto">
                    <form>
                        <div class="form-group">
                            <label for="CompanyName" class="control-label">Company Name</label>
                            <input for="CompanyName" class="form-control" @bind="@customer.CompanyName" />
                        </div>

                        <div class="form-group">
                            <label for="ContactName" class="control-label">Contact Name</label>
                            <input for="ContactName" class="form-control" @bind="@customer.ContactName" />
                        </div>

                        <div class="form-group">
                            <label for="Address" class="control-label">Address</label>
                            <input for="Address" class="form-control" @bind="@customer.Address" />
                        </div>

                        <div class="form-group">
                            <label for="City" class="control-label">City</label>
                            <input for="City" class="form-control" @bind="@customer.City" />
                        </div>

                        <div class="form-group">
                            <label for="Region" class="control-label">Region</label>
                            <input for="Region" class="form-control" @bind="@customer.Region" />
                        </div>

                        <div class="form-group">
                            <label for="PostalCode" class="control-label">Postal Code</label>
                            <input for="PostalCode" class="form-control" @bind="@customer.PostalCode" />
                        </div>

                        <div class="form-group">
                            <label for="Country" class="control-label">Country</label>
                            <input for="Country" class="form-control" @bind="@customer.Country" />
                        </div>

                        <div class="form-group">
                            <label for="Phone" class="control-label">Phone</label>
                            <input for="Phone" class="form-control" @bind="@customer.Phone" />
                        </div>

                    </form>
                </div>
                @Check();
                <div class="modal-footer">
                    <button class="btn btn-block btn-success" @onclick="@(async () => await SaveCust())" data-dismiss="modal">Save</button>
                </div>
            </div>
        </div>

    </div>


}

@if (deleteCustomer)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">

        <div class="modal-dialog">

            <div class="modal-content">

                <div class="modal-header">
                    <h3 class="modal-title">Delete Cusotmer</h3>
                    <button type="button" class="close" @onclick="@CloseModal">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>

                <div class="modal-body">
                    <table class="table">

                        <tr>
                            <td>Company Name</td>
                            <td>@customer.CompanyName</td>
                        </tr>

                        <tr>
                            <td>Contact Name</td>
                            <td>@customer.ContactName</td>
                        </tr>

                        <tr>
                            <td>Address</td>
                            <td>@customer.Address</td>
                        </tr>

                        <tr>
                            <td>City</td>
                            <td>@customer.City</td>
                        </tr>

                        <tr>
                            <td>Region</td>
                            <td>@customer.Region</td>
                        </tr>

                        <tr>
                            <td>Postal Code</td>
                            <td>@customer.PostalCode</td>
                        </tr>

                        <tr>
                            <td>Country</td>
                            <td>@customer.Country</td>
                        </tr>

                        <tr>
                            <td>Phone</td>
                            <td>@customer.Phone</td>
                        </tr>
                    </table>

                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" type="submit" @onclick="@(async () => await DeleteCustomer(customer.Id))" data-dismiss="modal">YES</button>
                    <button class="btn btn-warning" @onclick="@CloseModal">NO</button>
                </div>
            </div>
        </div>
    </div>
}

@if (message != "")
{
    <div class="modal " tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-body modal-body2">@message</h3>
                    <button type="button" class="close" @onclick="@Cancel">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    protected Customer customer = new Customer();
    protected List<Customer> custList;
    protected string title { get; set; }
    protected string SearchString { get; set; }
    protected bool deleteCustomer = false;
    protected bool addCustomer = false;
    protected bool ok = false;
    protected bool find = false;
    protected string message = "";


    public IEnumerable<string> items1 = Enumerable.Range(0, 1000000).Select(i => i.ToString()).ToArray();

    protected override async Task OnInitializedAsync()
    {
        custList = await Http.GetJsonAsync<List<Customer>>("api/Customer/Get");
    }

    protected async Task SaveCust()
    {
        if (customer.Id != null)
        {
            await Http.SendJsonAsync(HttpMethod.Put, "api/Customer/Edit", customer);
            this.message = "Customer Updated!";
        }
        else
        {
            if (ok == true)
            {
                await Http.SendJsonAsync(HttpMethod.Post, "/api/Customer/Add", customer);
                this.message = "Customer Added!";
            }
            else
            {
                this.message = "Fill all fields.";
            }
        }
        await OnInitializedAsync();
        this.addCustomer = false;
    }

    protected async Task DeleteConfirm(string ID)
    {
        customer = await Http.GetJsonAsync<Customer>("/api/Customer/Details/" + ID);
        this.deleteCustomer = true;
    }

    protected async Task DeleteCustomer(string id)
    {
        await Http.DeleteAsync("api/Customer/Delete/" + id);
        this.deleteCustomer = false;
        await OnInitializedAsync();
        this.message = "Customer Deleted!";
    }

    protected async Task Edit(string id)
    {
        customer = await Http.GetJsonAsync<Customer>("api/Customer/Details/" + id);
        this.title = "Edit Customer";
        this.addCustomer = true;
    }

    protected async Task SearchCustomer(string search)
    {
        await OnInitializedAsync();

        bool exists = custList.Exists(customer=>customer.CompanyName==search);
        bool exists1 = custList.Exists(customer=>customer.ContactName==search);
        bool exists2 = custList.Exists(customer=>customer.Address==search);
        bool exists3 = custList.Exists(customer=>customer.Region==search);
        bool exists4 = custList.Exists(customer=>customer.PostalCode==search);
        bool exists5 = custList.Exists(customer=>customer.Country==search);
        bool exists6 = custList.Exists(customer=>customer.City==search);
        bool exists7 = custList.Exists(customer=>customer.Phone==search);

        if(exists==true || exists1==true || exists2==true|| exists3==true||exists4==true||exists5==true||exists6==true||exists7==true)
        {
            custList= await Http.GetJsonAsync<List<Customer>>("api/Customer/SearchResults/" + search);

        }
        else
        {
            message = "No results";
        }

    }

    protected bool Check()
    {
        if (customer.Phone == null || customer.CompanyName == null || customer.ContactName == null || customer.Country == null || customer.PostalCode == null || customer.Region == null || customer.Address == null)
        {
            ok = false;
        }
        else
        {
            ok = true;
        }
        return ok;
    }

    protected void Add()
    {
        customer = new Customer();
        this.addCustomer = true;
        this.title = "Add Customer";
    }

    protected void CloseModal()
    {
        this.deleteCustomer = false;
        this.addCustomer = false;
        this.find = false;
    }

    protected void Cancel()
    {
        this.message = "";
    }
}
